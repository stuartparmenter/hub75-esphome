substitutions:
  name: "hub75-demo"
  friendly_name: "HUB75 Demo Display"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  name_add_mac_suffix: true

esp32:
  board: esp32-p4-evboard
  flash_size: 16MB
  cpu_frequency: 400MHz
  framework:
    type: esp-idf
    version: 5.5.1
    advanced:
      enable_idf_experimental_features: true
    sdkconfig_options:
      CONFIG_ESP_TASK_WDT_TIMEOUT_S: "30"

esp_ldo:

esp32_hosted:
  variant: ESP32C6
  reset_pin: GPIO54
  cmd_pin: GPIO19
  clk_pin: GPIO18
  d0_pin: GPIO14
  d1_pin: GPIO15
  d2_pin: GPIO16
  d3_pin: GPIO17
  active_high: true

psram:
  speed: 200MHz

external_components:
  - source:
      type: local
      path: C:/Users/stuart/Builds/hub75-esphome/esphome/components
    components: [hub75]

display:
  - platform: hub75
    id: matrix
    panel_width: 64
    panel_height: 64
    layout_rows: 1
    layout_cols: 1
    layout: HORIZONTAL
    scan_wiring: STANDARD_TWO_SCAN

    clock_phase: false
    latch_blanking: 2
    clock_speed: 10MHz

    r1_pin: 20
    g1_pin: 21
    b1_pin: 22
    r2_pin: 23
    g2_pin: 26
    b2_pin: 27
    a_pin: 1
    b_pin: 2
    c_pin: 3
    d_pin: 4
    e_pin: 5
    lat_pin: 6
    oe_pin: 45
    clk_pin: 47

    bit_depth: 8
    double_buffer: true
    auto_clear_enabled: true
    update_interval: 50ms

    lambda: |-
      static int frame = 0;
      frame++;

      const int width = it.get_width();
      const int height = it.get_height();

      // Animation 1: Bouncing ball
      int ball_x = (frame * 2) % (width + 40) - 20;
      int ball_y = abs((frame % 80) - 40) + 10;
      it.filled_circle(ball_x, ball_y, 5, Color(255, 0, 0));

      // Animation 2: Vertical scrolling bar
      int bar_y = (frame * 2) % (height + 20);
      it.filled_rectangle(0, bar_y, width, 3, Color(0, 255, 0));

      // Animation 3: Horizontal scrolling bar
      int bar_x = (frame * 3) % (width + 20);
      it.filled_rectangle(bar_x, 0, 3, height, Color(0, 0, 255));

      // Animation 4: Rotating line from center
      float angle = (frame * 0.1f);
      int x2 = 32 + (int)(25 * cos(angle));
      int y2 = 32 + (int)(25 * sin(angle));
      it.line(32, 32, x2, y2, Color(255, 255, 0));

      // Draw frame counter to verify updates
      it.printf(32, 2, id(display_font), Color(255, 255, 255), TextAlign::TOP_CENTER, "%d", frame);

font:
  - file: "gfonts://Roboto"
    id: display_font
    size: 8

logger:
  level: DEBUG

api:

ota:
  platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: none
  ap:

captive_portal:

web_server:
  version: 3
